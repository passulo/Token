// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: com/passulo/token.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Com_Passulo_V1_Token {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var firstName: String = String()

  var middleName: String = String()

  var lastName: String = String()

  var gender: String = String()

  var number: String = String()

  var status: String = String()

  var company: String = String()

  var email: String = String()

  var telephone: String = String()

  var association: String = String()

  var validUntil: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _validUntil ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_validUntil = newValue}
  }
  /// Returns true if `validUntil` has been explicitly set.
  var hasValidUntil: Bool {return self._validUntil != nil}
  /// Clears the value of `validUntil`. Subsequent reads from it will return its default value.
  mutating func clearValidUntil() {self._validUntil = nil}

  var memberSince: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _memberSince ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_memberSince = newValue}
  }
  /// Returns true if `memberSince` has been explicitly set.
  var hasMemberSince: Bool {return self._memberSince != nil}
  /// Clears the value of `memberSince`. Subsequent reads from it will return its default value.
  mutating func clearMemberSince() {self._memberSince = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _validUntil: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _memberSince: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.passulo.v1"

extension Com_Passulo_V1_Token: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Token"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "firstName"),
    3: .same(proto: "middleName"),
    4: .same(proto: "lastName"),
    5: .same(proto: "gender"),
    6: .same(proto: "number"),
    7: .same(proto: "status"),
    8: .same(proto: "company"),
    9: .same(proto: "email"),
    10: .same(proto: "telephone"),
    11: .same(proto: "association"),
    12: .same(proto: "validUntil"),
    13: .same(proto: "memberSince"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.firstName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.middleName) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.lastName) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.gender) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.number) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.status) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.company) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.email) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.telephone) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.association) }()
      case 12: try { try decoder.decodeSingularMessageField(value: &self._validUntil) }()
      case 13: try { try decoder.decodeSingularMessageField(value: &self._memberSince) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.firstName.isEmpty {
      try visitor.visitSingularStringField(value: self.firstName, fieldNumber: 2)
    }
    if !self.middleName.isEmpty {
      try visitor.visitSingularStringField(value: self.middleName, fieldNumber: 3)
    }
    if !self.lastName.isEmpty {
      try visitor.visitSingularStringField(value: self.lastName, fieldNumber: 4)
    }
    if !self.gender.isEmpty {
      try visitor.visitSingularStringField(value: self.gender, fieldNumber: 5)
    }
    if !self.number.isEmpty {
      try visitor.visitSingularStringField(value: self.number, fieldNumber: 6)
    }
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 7)
    }
    if !self.company.isEmpty {
      try visitor.visitSingularStringField(value: self.company, fieldNumber: 8)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 9)
    }
    if !self.telephone.isEmpty {
      try visitor.visitSingularStringField(value: self.telephone, fieldNumber: 10)
    }
    if !self.association.isEmpty {
      try visitor.visitSingularStringField(value: self.association, fieldNumber: 11)
    }
    try { if let v = self._validUntil {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    } }()
    try { if let v = self._memberSince {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Passulo_V1_Token, rhs: Com_Passulo_V1_Token) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.firstName != rhs.firstName {return false}
    if lhs.middleName != rhs.middleName {return false}
    if lhs.lastName != rhs.lastName {return false}
    if lhs.gender != rhs.gender {return false}
    if lhs.number != rhs.number {return false}
    if lhs.status != rhs.status {return false}
    if lhs.company != rhs.company {return false}
    if lhs.email != rhs.email {return false}
    if lhs.telephone != rhs.telephone {return false}
    if lhs.association != rhs.association {return false}
    if lhs._validUntil != rhs._validUntil {return false}
    if lhs._memberSince != rhs._memberSince {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
