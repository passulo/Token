// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/passulo/token.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "com/passulo/Token.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(GPBTimestamp);

#pragma mark - TokenRoot

@implementation TokenRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - TokenRoot_FileDescriptor

static GPBFileDescriptor *TokenRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.passulo.v1"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Token

@implementation Token

@dynamic id_p;
@dynamic firstName;
@dynamic middleName;
@dynamic lastName;
@dynamic gender;
@dynamic number;
@dynamic status;
@dynamic company;
@dynamic email;
@dynamic telephone;
@dynamic association;
@dynamic hasValidUntil, validUntil;
@dynamic hasMemberSince, memberSince;

typedef struct Token__storage_ {
  uint32_t _has_storage_[1];
  Token_Gender gender;
  NSString *id_p;
  NSString *firstName;
  NSString *middleName;
  NSString *lastName;
  NSString *number;
  NSString *status;
  NSString *company;
  NSString *email;
  NSString *telephone;
  NSString *association;
  GPBTimestamp *validUntil;
  GPBTimestamp *memberSince;
} Token__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = Token_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Token__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "firstName",
        .dataTypeSpecific.clazz = Nil,
        .number = Token_FieldNumber_FirstName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Token__storage_, firstName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "middleName",
        .dataTypeSpecific.clazz = Nil,
        .number = Token_FieldNumber_MiddleName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Token__storage_, middleName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lastName",
        .dataTypeSpecific.clazz = Nil,
        .number = Token_FieldNumber_LastName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Token__storage_, lastName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gender",
        .dataTypeSpecific.enumDescFunc = Token_Gender_EnumDescriptor,
        .number = Token_FieldNumber_Gender,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Token__storage_, gender),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "number",
        .dataTypeSpecific.clazz = Nil,
        .number = Token_FieldNumber_Number,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Token__storage_, number),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.clazz = Nil,
        .number = Token_FieldNumber_Status,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Token__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "company",
        .dataTypeSpecific.clazz = Nil,
        .number = Token_FieldNumber_Company,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Token__storage_, company),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "email",
        .dataTypeSpecific.clazz = Nil,
        .number = Token_FieldNumber_Email,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(Token__storage_, email),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "telephone",
        .dataTypeSpecific.clazz = Nil,
        .number = Token_FieldNumber_Telephone,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(Token__storage_, telephone),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "association",
        .dataTypeSpecific.clazz = Nil,
        .number = Token_FieldNumber_Association,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(Token__storage_, association),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "validUntil",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = Token_FieldNumber_ValidUntil,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(Token__storage_, validUntil),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "memberSince",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = Token_FieldNumber_MemberSince,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(Token__storage_, memberSince),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Token class]
                                     rootClass:[TokenRoot class]
                                          file:TokenRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Token__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\002\t\000\003\n\000\004\010\000\014\n\000\r\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Token_Gender_RawValue(Token *message) {
  GPBDescriptor *descriptor = [Token descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Token_FieldNumber_Gender];
  return GPBGetMessageRawEnumField(message, field);
}

void SetToken_Gender_RawValue(Token *message, int32_t value) {
  GPBDescriptor *descriptor = [Token descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Token_FieldNumber_Gender];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum Token_Gender

GPBEnumDescriptor *Token_Gender_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Undefined\000Female\000Male\000Diverse\000";
    static const int32_t values[] = {
        Token_Gender_Undefined,
        Token_Gender_Female,
        Token_Gender_Male,
        Token_Gender_Diverse,
    };
    static const char *extraTextFormatInfo = "\004\000)\000\001&\000\002$\000\003\'\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Token_Gender)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Token_Gender_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Token_Gender_IsValidValue(int32_t value__) {
  switch (value__) {
    case Token_Gender_Undefined:
    case Token_Gender_Female:
    case Token_Gender_Male:
    case Token_Gender_Diverse:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
