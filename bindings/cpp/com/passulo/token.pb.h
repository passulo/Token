// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/passulo/token.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_com_2fpassulo_2ftoken_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_com_2fpassulo_2ftoken_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_com_2fpassulo_2ftoken_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_com_2fpassulo_2ftoken_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_com_2fpassulo_2ftoken_2eproto;
namespace com {
namespace passulo {
namespace v1 {
class Token;
struct TokenDefaultTypeInternal;
extern TokenDefaultTypeInternal _Token_default_instance_;
}  // namespace v1
}  // namespace passulo
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::passulo::v1::Token* Arena::CreateMaybeMessage<::com::passulo::v1::Token>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace passulo {
namespace v1 {

// ===================================================================

class Token final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.passulo.v1.Token) */ {
 public:
  inline Token() : Token(nullptr) {}
  ~Token() override;
  explicit constexpr Token(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Token(const Token& from);
  Token(Token&& from) noexcept
    : Token() {
    *this = ::std::move(from);
  }

  inline Token& operator=(const Token& from) {
    CopyFrom(from);
    return *this;
  }
  inline Token& operator=(Token&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Token& default_instance() {
    return *internal_default_instance();
  }
  static inline const Token* internal_default_instance() {
    return reinterpret_cast<const Token*>(
               &_Token_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Token& a, Token& b) {
    a.Swap(&b);
  }
  inline void Swap(Token* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Token* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Token* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Token>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Token& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Token& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Token* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.passulo.v1.Token";
  }
  protected:
  explicit Token(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kFirstNameFieldNumber = 2,
    kMiddleNameFieldNumber = 3,
    kLastNameFieldNumber = 4,
    kGenderFieldNumber = 5,
    kNumberFieldNumber = 6,
    kStatusFieldNumber = 7,
    kCompanyFieldNumber = 8,
    kEmailFieldNumber = 9,
    kTelephoneFieldNumber = 10,
    kAssociationFieldNumber = 11,
    kValidUntilFieldNumber = 12,
    kMemberSinceFieldNumber = 13,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string firstName = 2;
  void clear_firstname();
  const std::string& firstname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_firstname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_firstname();
  PROTOBUF_NODISCARD std::string* release_firstname();
  void set_allocated_firstname(std::string* firstname);
  private:
  const std::string& _internal_firstname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_firstname(const std::string& value);
  std::string* _internal_mutable_firstname();
  public:

  // string middleName = 3;
  void clear_middlename();
  const std::string& middlename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_middlename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_middlename();
  PROTOBUF_NODISCARD std::string* release_middlename();
  void set_allocated_middlename(std::string* middlename);
  private:
  const std::string& _internal_middlename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_middlename(const std::string& value);
  std::string* _internal_mutable_middlename();
  public:

  // string lastName = 4;
  void clear_lastname();
  const std::string& lastname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lastname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lastname();
  PROTOBUF_NODISCARD std::string* release_lastname();
  void set_allocated_lastname(std::string* lastname);
  private:
  const std::string& _internal_lastname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lastname(const std::string& value);
  std::string* _internal_mutable_lastname();
  public:

  // string gender = 5;
  void clear_gender();
  const std::string& gender() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gender(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gender();
  PROTOBUF_NODISCARD std::string* release_gender();
  void set_allocated_gender(std::string* gender);
  private:
  const std::string& _internal_gender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gender(const std::string& value);
  std::string* _internal_mutable_gender();
  public:

  // string number = 6;
  void clear_number();
  const std::string& number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_number();
  PROTOBUF_NODISCARD std::string* release_number();
  void set_allocated_number(std::string* number);
  private:
  const std::string& _internal_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_number(const std::string& value);
  std::string* _internal_mutable_number();
  public:

  // string status = 7;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string company = 8;
  void clear_company();
  const std::string& company() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_company(ArgT0&& arg0, ArgT... args);
  std::string* mutable_company();
  PROTOBUF_NODISCARD std::string* release_company();
  void set_allocated_company(std::string* company);
  private:
  const std::string& _internal_company() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_company(const std::string& value);
  std::string* _internal_mutable_company();
  public:

  // string email = 9;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string telephone = 10;
  void clear_telephone();
  const std::string& telephone() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_telephone(ArgT0&& arg0, ArgT... args);
  std::string* mutable_telephone();
  PROTOBUF_NODISCARD std::string* release_telephone();
  void set_allocated_telephone(std::string* telephone);
  private:
  const std::string& _internal_telephone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_telephone(const std::string& value);
  std::string* _internal_mutable_telephone();
  public:

  // string association = 11;
  void clear_association();
  const std::string& association() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_association(ArgT0&& arg0, ArgT... args);
  std::string* mutable_association();
  PROTOBUF_NODISCARD std::string* release_association();
  void set_allocated_association(std::string* association);
  private:
  const std::string& _internal_association() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_association(const std::string& value);
  std::string* _internal_mutable_association();
  public:

  // .google.protobuf.Timestamp validUntil = 12;
  bool has_validuntil() const;
  private:
  bool _internal_has_validuntil() const;
  public:
  void clear_validuntil();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& validuntil() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_validuntil();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_validuntil();
  void set_allocated_validuntil(::PROTOBUF_NAMESPACE_ID::Timestamp* validuntil);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_validuntil() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_validuntil();
  public:
  void unsafe_arena_set_allocated_validuntil(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* validuntil);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_validuntil();

  // .google.protobuf.Timestamp memberSince = 13;
  bool has_membersince() const;
  private:
  bool _internal_has_membersince() const;
  public:
  void clear_membersince();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& membersince() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_membersince();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_membersince();
  void set_allocated_membersince(::PROTOBUF_NAMESPACE_ID::Timestamp* membersince);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_membersince() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_membersince();
  public:
  void unsafe_arena_set_allocated_membersince(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* membersince);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_membersince();

  // @@protoc_insertion_point(class_scope:com.passulo.v1.Token)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firstname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr middlename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lastname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gender_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr company_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr telephone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr association_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* validuntil_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* membersince_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2fpassulo_2ftoken_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Token

// string id = 1;
inline void Token::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Token::id() const {
  // @@protoc_insertion_point(field_get:com.passulo.v1.Token.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Token::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.passulo.v1.Token.id)
}
inline std::string* Token::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:com.passulo.v1.Token.id)
  return _s;
}
inline const std::string& Token::_internal_id() const {
  return id_.Get();
}
inline void Token::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Token::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Token::release_id() {
  // @@protoc_insertion_point(field_release:com.passulo.v1.Token.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Token::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.passulo.v1.Token.id)
}

// string firstName = 2;
inline void Token::clear_firstname() {
  firstname_.ClearToEmpty();
}
inline const std::string& Token::firstname() const {
  // @@protoc_insertion_point(field_get:com.passulo.v1.Token.firstName)
  return _internal_firstname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Token::set_firstname(ArgT0&& arg0, ArgT... args) {
 
 firstname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.passulo.v1.Token.firstName)
}
inline std::string* Token::mutable_firstname() {
  std::string* _s = _internal_mutable_firstname();
  // @@protoc_insertion_point(field_mutable:com.passulo.v1.Token.firstName)
  return _s;
}
inline const std::string& Token::_internal_firstname() const {
  return firstname_.Get();
}
inline void Token::_internal_set_firstname(const std::string& value) {
  
  firstname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Token::_internal_mutable_firstname() {
  
  return firstname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Token::release_firstname() {
  // @@protoc_insertion_point(field_release:com.passulo.v1.Token.firstName)
  return firstname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Token::set_allocated_firstname(std::string* firstname) {
  if (firstname != nullptr) {
    
  } else {
    
  }
  firstname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), firstname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (firstname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    firstname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.passulo.v1.Token.firstName)
}

// string middleName = 3;
inline void Token::clear_middlename() {
  middlename_.ClearToEmpty();
}
inline const std::string& Token::middlename() const {
  // @@protoc_insertion_point(field_get:com.passulo.v1.Token.middleName)
  return _internal_middlename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Token::set_middlename(ArgT0&& arg0, ArgT... args) {
 
 middlename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.passulo.v1.Token.middleName)
}
inline std::string* Token::mutable_middlename() {
  std::string* _s = _internal_mutable_middlename();
  // @@protoc_insertion_point(field_mutable:com.passulo.v1.Token.middleName)
  return _s;
}
inline const std::string& Token::_internal_middlename() const {
  return middlename_.Get();
}
inline void Token::_internal_set_middlename(const std::string& value) {
  
  middlename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Token::_internal_mutable_middlename() {
  
  return middlename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Token::release_middlename() {
  // @@protoc_insertion_point(field_release:com.passulo.v1.Token.middleName)
  return middlename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Token::set_allocated_middlename(std::string* middlename) {
  if (middlename != nullptr) {
    
  } else {
    
  }
  middlename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), middlename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (middlename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    middlename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.passulo.v1.Token.middleName)
}

// string lastName = 4;
inline void Token::clear_lastname() {
  lastname_.ClearToEmpty();
}
inline const std::string& Token::lastname() const {
  // @@protoc_insertion_point(field_get:com.passulo.v1.Token.lastName)
  return _internal_lastname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Token::set_lastname(ArgT0&& arg0, ArgT... args) {
 
 lastname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.passulo.v1.Token.lastName)
}
inline std::string* Token::mutable_lastname() {
  std::string* _s = _internal_mutable_lastname();
  // @@protoc_insertion_point(field_mutable:com.passulo.v1.Token.lastName)
  return _s;
}
inline const std::string& Token::_internal_lastname() const {
  return lastname_.Get();
}
inline void Token::_internal_set_lastname(const std::string& value) {
  
  lastname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Token::_internal_mutable_lastname() {
  
  return lastname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Token::release_lastname() {
  // @@protoc_insertion_point(field_release:com.passulo.v1.Token.lastName)
  return lastname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Token::set_allocated_lastname(std::string* lastname) {
  if (lastname != nullptr) {
    
  } else {
    
  }
  lastname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lastname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (lastname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    lastname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.passulo.v1.Token.lastName)
}

// string gender = 5;
inline void Token::clear_gender() {
  gender_.ClearToEmpty();
}
inline const std::string& Token::gender() const {
  // @@protoc_insertion_point(field_get:com.passulo.v1.Token.gender)
  return _internal_gender();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Token::set_gender(ArgT0&& arg0, ArgT... args) {
 
 gender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.passulo.v1.Token.gender)
}
inline std::string* Token::mutable_gender() {
  std::string* _s = _internal_mutable_gender();
  // @@protoc_insertion_point(field_mutable:com.passulo.v1.Token.gender)
  return _s;
}
inline const std::string& Token::_internal_gender() const {
  return gender_.Get();
}
inline void Token::_internal_set_gender(const std::string& value) {
  
  gender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Token::_internal_mutable_gender() {
  
  return gender_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Token::release_gender() {
  // @@protoc_insertion_point(field_release:com.passulo.v1.Token.gender)
  return gender_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Token::set_allocated_gender(std::string* gender) {
  if (gender != nullptr) {
    
  } else {
    
  }
  gender_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gender,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gender_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gender_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.passulo.v1.Token.gender)
}

// string number = 6;
inline void Token::clear_number() {
  number_.ClearToEmpty();
}
inline const std::string& Token::number() const {
  // @@protoc_insertion_point(field_get:com.passulo.v1.Token.number)
  return _internal_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Token::set_number(ArgT0&& arg0, ArgT... args) {
 
 number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.passulo.v1.Token.number)
}
inline std::string* Token::mutable_number() {
  std::string* _s = _internal_mutable_number();
  // @@protoc_insertion_point(field_mutable:com.passulo.v1.Token.number)
  return _s;
}
inline const std::string& Token::_internal_number() const {
  return number_.Get();
}
inline void Token::_internal_set_number(const std::string& value) {
  
  number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Token::_internal_mutable_number() {
  
  return number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Token::release_number() {
  // @@protoc_insertion_point(field_release:com.passulo.v1.Token.number)
  return number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Token::set_allocated_number(std::string* number) {
  if (number != nullptr) {
    
  } else {
    
  }
  number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), number,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.passulo.v1.Token.number)
}

// string status = 7;
inline void Token::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& Token::status() const {
  // @@protoc_insertion_point(field_get:com.passulo.v1.Token.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Token::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.passulo.v1.Token.status)
}
inline std::string* Token::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:com.passulo.v1.Token.status)
  return _s;
}
inline const std::string& Token::_internal_status() const {
  return status_.Get();
}
inline void Token::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Token::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Token::release_status() {
  // @@protoc_insertion_point(field_release:com.passulo.v1.Token.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Token::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.passulo.v1.Token.status)
}

// string company = 8;
inline void Token::clear_company() {
  company_.ClearToEmpty();
}
inline const std::string& Token::company() const {
  // @@protoc_insertion_point(field_get:com.passulo.v1.Token.company)
  return _internal_company();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Token::set_company(ArgT0&& arg0, ArgT... args) {
 
 company_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.passulo.v1.Token.company)
}
inline std::string* Token::mutable_company() {
  std::string* _s = _internal_mutable_company();
  // @@protoc_insertion_point(field_mutable:com.passulo.v1.Token.company)
  return _s;
}
inline const std::string& Token::_internal_company() const {
  return company_.Get();
}
inline void Token::_internal_set_company(const std::string& value) {
  
  company_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Token::_internal_mutable_company() {
  
  return company_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Token::release_company() {
  // @@protoc_insertion_point(field_release:com.passulo.v1.Token.company)
  return company_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Token::set_allocated_company(std::string* company) {
  if (company != nullptr) {
    
  } else {
    
  }
  company_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), company,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (company_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    company_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.passulo.v1.Token.company)
}

// string email = 9;
inline void Token::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& Token::email() const {
  // @@protoc_insertion_point(field_get:com.passulo.v1.Token.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Token::set_email(ArgT0&& arg0, ArgT... args) {
 
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.passulo.v1.Token.email)
}
inline std::string* Token::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:com.passulo.v1.Token.email)
  return _s;
}
inline const std::string& Token::_internal_email() const {
  return email_.Get();
}
inline void Token::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Token::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Token::release_email() {
  // @@protoc_insertion_point(field_release:com.passulo.v1.Token.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Token::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (email_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.passulo.v1.Token.email)
}

// string telephone = 10;
inline void Token::clear_telephone() {
  telephone_.ClearToEmpty();
}
inline const std::string& Token::telephone() const {
  // @@protoc_insertion_point(field_get:com.passulo.v1.Token.telephone)
  return _internal_telephone();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Token::set_telephone(ArgT0&& arg0, ArgT... args) {
 
 telephone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.passulo.v1.Token.telephone)
}
inline std::string* Token::mutable_telephone() {
  std::string* _s = _internal_mutable_telephone();
  // @@protoc_insertion_point(field_mutable:com.passulo.v1.Token.telephone)
  return _s;
}
inline const std::string& Token::_internal_telephone() const {
  return telephone_.Get();
}
inline void Token::_internal_set_telephone(const std::string& value) {
  
  telephone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Token::_internal_mutable_telephone() {
  
  return telephone_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Token::release_telephone() {
  // @@protoc_insertion_point(field_release:com.passulo.v1.Token.telephone)
  return telephone_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Token::set_allocated_telephone(std::string* telephone) {
  if (telephone != nullptr) {
    
  } else {
    
  }
  telephone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), telephone,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (telephone_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    telephone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.passulo.v1.Token.telephone)
}

// string association = 11;
inline void Token::clear_association() {
  association_.ClearToEmpty();
}
inline const std::string& Token::association() const {
  // @@protoc_insertion_point(field_get:com.passulo.v1.Token.association)
  return _internal_association();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Token::set_association(ArgT0&& arg0, ArgT... args) {
 
 association_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.passulo.v1.Token.association)
}
inline std::string* Token::mutable_association() {
  std::string* _s = _internal_mutable_association();
  // @@protoc_insertion_point(field_mutable:com.passulo.v1.Token.association)
  return _s;
}
inline const std::string& Token::_internal_association() const {
  return association_.Get();
}
inline void Token::_internal_set_association(const std::string& value) {
  
  association_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Token::_internal_mutable_association() {
  
  return association_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Token::release_association() {
  // @@protoc_insertion_point(field_release:com.passulo.v1.Token.association)
  return association_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Token::set_allocated_association(std::string* association) {
  if (association != nullptr) {
    
  } else {
    
  }
  association_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), association,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (association_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    association_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.passulo.v1.Token.association)
}

// .google.protobuf.Timestamp validUntil = 12;
inline bool Token::_internal_has_validuntil() const {
  return this != internal_default_instance() && validuntil_ != nullptr;
}
inline bool Token::has_validuntil() const {
  return _internal_has_validuntil();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Token::_internal_validuntil() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = validuntil_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Token::validuntil() const {
  // @@protoc_insertion_point(field_get:com.passulo.v1.Token.validUntil)
  return _internal_validuntil();
}
inline void Token::unsafe_arena_set_allocated_validuntil(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* validuntil) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(validuntil_);
  }
  validuntil_ = validuntil;
  if (validuntil) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.passulo.v1.Token.validUntil)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Token::release_validuntil() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = validuntil_;
  validuntil_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Token::unsafe_arena_release_validuntil() {
  // @@protoc_insertion_point(field_release:com.passulo.v1.Token.validUntil)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = validuntil_;
  validuntil_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Token::_internal_mutable_validuntil() {
  
  if (validuntil_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    validuntil_ = p;
  }
  return validuntil_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Token::mutable_validuntil() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_validuntil();
  // @@protoc_insertion_point(field_mutable:com.passulo.v1.Token.validUntil)
  return _msg;
}
inline void Token::set_allocated_validuntil(::PROTOBUF_NAMESPACE_ID::Timestamp* validuntil) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(validuntil_);
  }
  if (validuntil) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(validuntil));
    if (message_arena != submessage_arena) {
      validuntil = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, validuntil, submessage_arena);
    }
    
  } else {
    
  }
  validuntil_ = validuntil;
  // @@protoc_insertion_point(field_set_allocated:com.passulo.v1.Token.validUntil)
}

// .google.protobuf.Timestamp memberSince = 13;
inline bool Token::_internal_has_membersince() const {
  return this != internal_default_instance() && membersince_ != nullptr;
}
inline bool Token::has_membersince() const {
  return _internal_has_membersince();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Token::_internal_membersince() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = membersince_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Token::membersince() const {
  // @@protoc_insertion_point(field_get:com.passulo.v1.Token.memberSince)
  return _internal_membersince();
}
inline void Token::unsafe_arena_set_allocated_membersince(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* membersince) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(membersince_);
  }
  membersince_ = membersince;
  if (membersince) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.passulo.v1.Token.memberSince)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Token::release_membersince() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = membersince_;
  membersince_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Token::unsafe_arena_release_membersince() {
  // @@protoc_insertion_point(field_release:com.passulo.v1.Token.memberSince)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = membersince_;
  membersince_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Token::_internal_mutable_membersince() {
  
  if (membersince_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    membersince_ = p;
  }
  return membersince_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Token::mutable_membersince() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_membersince();
  // @@protoc_insertion_point(field_mutable:com.passulo.v1.Token.memberSince)
  return _msg;
}
inline void Token::set_allocated_membersince(::PROTOBUF_NAMESPACE_ID::Timestamp* membersince) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(membersince_);
  }
  if (membersince) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(membersince));
    if (message_arena != submessage_arena) {
      membersince = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, membersince, submessage_arena);
    }
    
  } else {
    
  }
  membersince_ = membersince;
  // @@protoc_insertion_point(field_set_allocated:com.passulo.v1.Token.memberSince)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace passulo
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_com_2fpassulo_2ftoken_2eproto
