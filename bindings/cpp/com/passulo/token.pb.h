// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/passulo/token.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_com_2fpassulo_2ftoken_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_com_2fpassulo_2ftoken_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_com_2fpassulo_2ftoken_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_com_2fpassulo_2ftoken_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_com_2fpassulo_2ftoken_2eproto;
namespace com {
namespace passulo {
namespace v1 {
class Token;
struct TokenDefaultTypeInternal;
extern TokenDefaultTypeInternal _Token_default_instance_;
}  // namespace v1
}  // namespace passulo
}  // namespace com
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace com {
namespace passulo {
namespace v1 {
enum Token_Gender : int {
  Token_Gender_undefined = 0,
  Token_Gender_female = 1,
  Token_Gender_male = 2,
  Token_Gender_diverse = 3,
  Token_Gender_Token_Gender_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Token_Gender_Token_Gender_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Token_Gender_IsValid(int value);
constexpr Token_Gender Token_Gender_Gender_MIN = static_cast<Token_Gender>(0);
constexpr Token_Gender Token_Gender_Gender_MAX = static_cast<Token_Gender>(3);
constexpr int Token_Gender_Gender_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
Token_Gender_descriptor();
template <typename T>
const std::string& Token_Gender_Name(T value) {
  static_assert(std::is_same<T, Token_Gender>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Gender_Name().");
  return Token_Gender_Name(static_cast<Token_Gender>(value));
}
template <>
inline const std::string& Token_Gender_Name(Token_Gender value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Token_Gender_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool Token_Gender_Parse(absl::string_view name, Token_Gender* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Token_Gender>(
      Token_Gender_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Token final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.passulo.v1.Token) */ {
 public:
  inline Token() : Token(nullptr) {}
  ~Token() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Token(::google::protobuf::internal::ConstantInitialized);

  Token(const Token& from);
  Token(Token&& from) noexcept
    : Token() {
    *this = ::std::move(from);
  }

  inline Token& operator=(const Token& from) {
    CopyFrom(from);
    return *this;
  }
  inline Token& operator=(Token&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Token& default_instance() {
    return *internal_default_instance();
  }
  static inline const Token* internal_default_instance() {
    return reinterpret_cast<const Token*>(
               &_Token_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Token& a, Token& b) {
    a.Swap(&b);
  }
  inline void Swap(Token* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Token* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Token* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Token>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Token& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Token& from) {
    Token::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Token* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.passulo.v1.Token";
  }
  protected:
  explicit Token(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Gender = Token_Gender;
  static constexpr Gender undefined = Token_Gender_undefined;
  static constexpr Gender female = Token_Gender_female;
  static constexpr Gender male = Token_Gender_male;
  static constexpr Gender diverse = Token_Gender_diverse;
  static inline bool Gender_IsValid(int value) {
    return Token_Gender_IsValid(value);
  }
  static constexpr Gender Gender_MIN = Token_Gender_Gender_MIN;
  static constexpr Gender Gender_MAX = Token_Gender_Gender_MAX;
  static constexpr int Gender_ARRAYSIZE = Token_Gender_Gender_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Gender_descriptor() {
    return Token_Gender_descriptor();
  }
  template <typename T>
  static inline const std::string& Gender_Name(T value) {
    return Token_Gender_Name(value);
  }
  static inline bool Gender_Parse(absl::string_view name, Gender* value) {
    return Token_Gender_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kFirstNameFieldNumber = 2,
    kMiddleNameFieldNumber = 3,
    kLastNameFieldNumber = 4,
    kNumberFieldNumber = 6,
    kStatusFieldNumber = 7,
    kCompanyFieldNumber = 8,
    kEmailFieldNumber = 9,
    kTelephoneFieldNumber = 10,
    kAssociationFieldNumber = 11,
    kValidUntilFieldNumber = 12,
    kMemberSinceFieldNumber = 13,
    kGenderFieldNumber = 5,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string firstName = 2;
  void clear_firstname() ;
  const std::string& firstname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_firstname(Arg_&& arg, Args_... args);
  std::string* mutable_firstname();
  PROTOBUF_NODISCARD std::string* release_firstname();
  void set_allocated_firstname(std::string* ptr);

  private:
  const std::string& _internal_firstname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_firstname(
      const std::string& value);
  std::string* _internal_mutable_firstname();

  public:
  // string middleName = 3;
  void clear_middlename() ;
  const std::string& middlename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_middlename(Arg_&& arg, Args_... args);
  std::string* mutable_middlename();
  PROTOBUF_NODISCARD std::string* release_middlename();
  void set_allocated_middlename(std::string* ptr);

  private:
  const std::string& _internal_middlename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_middlename(
      const std::string& value);
  std::string* _internal_mutable_middlename();

  public:
  // string lastName = 4;
  void clear_lastname() ;
  const std::string& lastname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lastname(Arg_&& arg, Args_... args);
  std::string* mutable_lastname();
  PROTOBUF_NODISCARD std::string* release_lastname();
  void set_allocated_lastname(std::string* ptr);

  private:
  const std::string& _internal_lastname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lastname(
      const std::string& value);
  std::string* _internal_mutable_lastname();

  public:
  // string number = 6;
  void clear_number() ;
  const std::string& number() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_number(Arg_&& arg, Args_... args);
  std::string* mutable_number();
  PROTOBUF_NODISCARD std::string* release_number();
  void set_allocated_number(std::string* ptr);

  private:
  const std::string& _internal_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_number(
      const std::string& value);
  std::string* _internal_mutable_number();

  public:
  // string status = 7;
  void clear_status() ;
  const std::string& status() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status(Arg_&& arg, Args_... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* ptr);

  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(
      const std::string& value);
  std::string* _internal_mutable_status();

  public:
  // string company = 8;
  void clear_company() ;
  const std::string& company() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_company(Arg_&& arg, Args_... args);
  std::string* mutable_company();
  PROTOBUF_NODISCARD std::string* release_company();
  void set_allocated_company(std::string* ptr);

  private:
  const std::string& _internal_company() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_company(
      const std::string& value);
  std::string* _internal_mutable_company();

  public:
  // string email = 9;
  void clear_email() ;
  const std::string& email() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_email(Arg_&& arg, Args_... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* ptr);

  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(
      const std::string& value);
  std::string* _internal_mutable_email();

  public:
  // string telephone = 10;
  void clear_telephone() ;
  const std::string& telephone() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_telephone(Arg_&& arg, Args_... args);
  std::string* mutable_telephone();
  PROTOBUF_NODISCARD std::string* release_telephone();
  void set_allocated_telephone(std::string* ptr);

  private:
  const std::string& _internal_telephone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_telephone(
      const std::string& value);
  std::string* _internal_mutable_telephone();

  public:
  // string association = 11;
  void clear_association() ;
  const std::string& association() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_association(Arg_&& arg, Args_... args);
  std::string* mutable_association();
  PROTOBUF_NODISCARD std::string* release_association();
  void set_allocated_association(std::string* ptr);

  private:
  const std::string& _internal_association() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_association(
      const std::string& value);
  std::string* _internal_mutable_association();

  public:
  // .google.protobuf.Timestamp validUntil = 12;
  bool has_validuntil() const;
  void clear_validuntil() ;
  const ::google::protobuf::Timestamp& validuntil() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_validuntil();
  ::google::protobuf::Timestamp* mutable_validuntil();
  void set_allocated_validuntil(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_validuntil(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_validuntil();

  private:
  const ::google::protobuf::Timestamp& _internal_validuntil() const;
  ::google::protobuf::Timestamp* _internal_mutable_validuntil();

  public:
  // .google.protobuf.Timestamp memberSince = 13;
  bool has_membersince() const;
  void clear_membersince() ;
  const ::google::protobuf::Timestamp& membersince() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_membersince();
  ::google::protobuf::Timestamp* mutable_membersince();
  void set_allocated_membersince(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_membersince(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_membersince();

  private:
  const ::google::protobuf::Timestamp& _internal_membersince() const;
  ::google::protobuf::Timestamp* _internal_mutable_membersince();

  public:
  // .com.passulo.v1.Token.Gender gender = 5;
  void clear_gender() ;
  ::com::passulo::v1::Token_Gender gender() const;
  void set_gender(::com::passulo::v1::Token_Gender value);

  private:
  ::com::passulo::v1::Token_Gender _internal_gender() const;
  void _internal_set_gender(::com::passulo::v1::Token_Gender value);

  public:
  // @@protoc_insertion_point(class_scope:com.passulo.v1.Token)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 13, 2, 110, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr firstname_;
    ::google::protobuf::internal::ArenaStringPtr middlename_;
    ::google::protobuf::internal::ArenaStringPtr lastname_;
    ::google::protobuf::internal::ArenaStringPtr number_;
    ::google::protobuf::internal::ArenaStringPtr status_;
    ::google::protobuf::internal::ArenaStringPtr company_;
    ::google::protobuf::internal::ArenaStringPtr email_;
    ::google::protobuf::internal::ArenaStringPtr telephone_;
    ::google::protobuf::internal::ArenaStringPtr association_;
    ::google::protobuf::Timestamp* validuntil_;
    ::google::protobuf::Timestamp* membersince_;
    int gender_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_com_2fpassulo_2ftoken_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Token

// string id = 1;
inline void Token::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Token::id() const {
  // @@protoc_insertion_point(field_get:com.passulo.v1.Token.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Token::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.passulo.v1.Token.id)
}
inline std::string* Token::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:com.passulo.v1.Token.id)
  return _s;
}
inline const std::string& Token::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void Token::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Token::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* Token::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:com.passulo.v1.Token.id)
  return _impl_.id_.Release();
}
inline void Token::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.passulo.v1.Token.id)
}

// string firstName = 2;
inline void Token::clear_firstname() {
  _impl_.firstname_.ClearToEmpty();
}
inline const std::string& Token::firstname() const {
  // @@protoc_insertion_point(field_get:com.passulo.v1.Token.firstName)
  return _internal_firstname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Token::set_firstname(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.firstname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.passulo.v1.Token.firstName)
}
inline std::string* Token::mutable_firstname() {
  std::string* _s = _internal_mutable_firstname();
  // @@protoc_insertion_point(field_mutable:com.passulo.v1.Token.firstName)
  return _s;
}
inline const std::string& Token::_internal_firstname() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.firstname_.Get();
}
inline void Token::_internal_set_firstname(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.firstname_.Set(value, GetArenaForAllocation());
}
inline std::string* Token::_internal_mutable_firstname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.firstname_.Mutable( GetArenaForAllocation());
}
inline std::string* Token::release_firstname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:com.passulo.v1.Token.firstName)
  return _impl_.firstname_.Release();
}
inline void Token::set_allocated_firstname(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.firstname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.firstname_.IsDefault()) {
          _impl_.firstname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.passulo.v1.Token.firstName)
}

// string middleName = 3;
inline void Token::clear_middlename() {
  _impl_.middlename_.ClearToEmpty();
}
inline const std::string& Token::middlename() const {
  // @@protoc_insertion_point(field_get:com.passulo.v1.Token.middleName)
  return _internal_middlename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Token::set_middlename(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.middlename_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.passulo.v1.Token.middleName)
}
inline std::string* Token::mutable_middlename() {
  std::string* _s = _internal_mutable_middlename();
  // @@protoc_insertion_point(field_mutable:com.passulo.v1.Token.middleName)
  return _s;
}
inline const std::string& Token::_internal_middlename() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.middlename_.Get();
}
inline void Token::_internal_set_middlename(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.middlename_.Set(value, GetArenaForAllocation());
}
inline std::string* Token::_internal_mutable_middlename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.middlename_.Mutable( GetArenaForAllocation());
}
inline std::string* Token::release_middlename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:com.passulo.v1.Token.middleName)
  return _impl_.middlename_.Release();
}
inline void Token::set_allocated_middlename(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.middlename_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.middlename_.IsDefault()) {
          _impl_.middlename_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.passulo.v1.Token.middleName)
}

// string lastName = 4;
inline void Token::clear_lastname() {
  _impl_.lastname_.ClearToEmpty();
}
inline const std::string& Token::lastname() const {
  // @@protoc_insertion_point(field_get:com.passulo.v1.Token.lastName)
  return _internal_lastname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Token::set_lastname(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lastname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.passulo.v1.Token.lastName)
}
inline std::string* Token::mutable_lastname() {
  std::string* _s = _internal_mutable_lastname();
  // @@protoc_insertion_point(field_mutable:com.passulo.v1.Token.lastName)
  return _s;
}
inline const std::string& Token::_internal_lastname() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lastname_.Get();
}
inline void Token::_internal_set_lastname(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lastname_.Set(value, GetArenaForAllocation());
}
inline std::string* Token::_internal_mutable_lastname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.lastname_.Mutable( GetArenaForAllocation());
}
inline std::string* Token::release_lastname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:com.passulo.v1.Token.lastName)
  return _impl_.lastname_.Release();
}
inline void Token::set_allocated_lastname(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lastname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.lastname_.IsDefault()) {
          _impl_.lastname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.passulo.v1.Token.lastName)
}

// .com.passulo.v1.Token.Gender gender = 5;
inline void Token::clear_gender() {
  _impl_.gender_ = 0;
}
inline ::com::passulo::v1::Token_Gender Token::gender() const {
  // @@protoc_insertion_point(field_get:com.passulo.v1.Token.gender)
  return _internal_gender();
}
inline void Token::set_gender(::com::passulo::v1::Token_Gender value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:com.passulo.v1.Token.gender)
}
inline ::com::passulo::v1::Token_Gender Token::_internal_gender() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::com::passulo::v1::Token_Gender>(_impl_.gender_);
}
inline void Token::_internal_set_gender(::com::passulo::v1::Token_Gender value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.gender_ = value;
}

// string number = 6;
inline void Token::clear_number() {
  _impl_.number_.ClearToEmpty();
}
inline const std::string& Token::number() const {
  // @@protoc_insertion_point(field_get:com.passulo.v1.Token.number)
  return _internal_number();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Token::set_number(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.number_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.passulo.v1.Token.number)
}
inline std::string* Token::mutable_number() {
  std::string* _s = _internal_mutable_number();
  // @@protoc_insertion_point(field_mutable:com.passulo.v1.Token.number)
  return _s;
}
inline const std::string& Token::_internal_number() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.number_.Get();
}
inline void Token::_internal_set_number(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.number_.Set(value, GetArenaForAllocation());
}
inline std::string* Token::_internal_mutable_number() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.number_.Mutable( GetArenaForAllocation());
}
inline std::string* Token::release_number() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:com.passulo.v1.Token.number)
  return _impl_.number_.Release();
}
inline void Token::set_allocated_number(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.number_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.number_.IsDefault()) {
          _impl_.number_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.passulo.v1.Token.number)
}

// string status = 7;
inline void Token::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& Token::status() const {
  // @@protoc_insertion_point(field_get:com.passulo.v1.Token.status)
  return _internal_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Token::set_status(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.passulo.v1.Token.status)
}
inline std::string* Token::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:com.passulo.v1.Token.status)
  return _s;
}
inline const std::string& Token::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.status_.Get();
}
inline void Token::_internal_set_status(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* Token::_internal_mutable_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.status_.Mutable( GetArenaForAllocation());
}
inline std::string* Token::release_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:com.passulo.v1.Token.status)
  return _impl_.status_.Release();
}
inline void Token::set_allocated_status(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.status_.IsDefault()) {
          _impl_.status_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.passulo.v1.Token.status)
}

// string company = 8;
inline void Token::clear_company() {
  _impl_.company_.ClearToEmpty();
}
inline const std::string& Token::company() const {
  // @@protoc_insertion_point(field_get:com.passulo.v1.Token.company)
  return _internal_company();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Token::set_company(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.company_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.passulo.v1.Token.company)
}
inline std::string* Token::mutable_company() {
  std::string* _s = _internal_mutable_company();
  // @@protoc_insertion_point(field_mutable:com.passulo.v1.Token.company)
  return _s;
}
inline const std::string& Token::_internal_company() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.company_.Get();
}
inline void Token::_internal_set_company(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.company_.Set(value, GetArenaForAllocation());
}
inline std::string* Token::_internal_mutable_company() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.company_.Mutable( GetArenaForAllocation());
}
inline std::string* Token::release_company() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:com.passulo.v1.Token.company)
  return _impl_.company_.Release();
}
inline void Token::set_allocated_company(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.company_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.company_.IsDefault()) {
          _impl_.company_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.passulo.v1.Token.company)
}

// string email = 9;
inline void Token::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& Token::email() const {
  // @@protoc_insertion_point(field_get:com.passulo.v1.Token.email)
  return _internal_email();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Token::set_email(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.email_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.passulo.v1.Token.email)
}
inline std::string* Token::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:com.passulo.v1.Token.email)
  return _s;
}
inline const std::string& Token::_internal_email() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.email_.Get();
}
inline void Token::_internal_set_email(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* Token::_internal_mutable_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.email_.Mutable( GetArenaForAllocation());
}
inline std::string* Token::release_email() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:com.passulo.v1.Token.email)
  return _impl_.email_.Release();
}
inline void Token::set_allocated_email(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.email_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.email_.IsDefault()) {
          _impl_.email_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.passulo.v1.Token.email)
}

// string telephone = 10;
inline void Token::clear_telephone() {
  _impl_.telephone_.ClearToEmpty();
}
inline const std::string& Token::telephone() const {
  // @@protoc_insertion_point(field_get:com.passulo.v1.Token.telephone)
  return _internal_telephone();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Token::set_telephone(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.telephone_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.passulo.v1.Token.telephone)
}
inline std::string* Token::mutable_telephone() {
  std::string* _s = _internal_mutable_telephone();
  // @@protoc_insertion_point(field_mutable:com.passulo.v1.Token.telephone)
  return _s;
}
inline const std::string& Token::_internal_telephone() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.telephone_.Get();
}
inline void Token::_internal_set_telephone(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.telephone_.Set(value, GetArenaForAllocation());
}
inline std::string* Token::_internal_mutable_telephone() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.telephone_.Mutable( GetArenaForAllocation());
}
inline std::string* Token::release_telephone() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:com.passulo.v1.Token.telephone)
  return _impl_.telephone_.Release();
}
inline void Token::set_allocated_telephone(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.telephone_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.telephone_.IsDefault()) {
          _impl_.telephone_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.passulo.v1.Token.telephone)
}

// string association = 11;
inline void Token::clear_association() {
  _impl_.association_.ClearToEmpty();
}
inline const std::string& Token::association() const {
  // @@protoc_insertion_point(field_get:com.passulo.v1.Token.association)
  return _internal_association();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Token::set_association(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.association_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.passulo.v1.Token.association)
}
inline std::string* Token::mutable_association() {
  std::string* _s = _internal_mutable_association();
  // @@protoc_insertion_point(field_mutable:com.passulo.v1.Token.association)
  return _s;
}
inline const std::string& Token::_internal_association() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.association_.Get();
}
inline void Token::_internal_set_association(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.association_.Set(value, GetArenaForAllocation());
}
inline std::string* Token::_internal_mutable_association() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.association_.Mutable( GetArenaForAllocation());
}
inline std::string* Token::release_association() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:com.passulo.v1.Token.association)
  return _impl_.association_.Release();
}
inline void Token::set_allocated_association(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.association_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.association_.IsDefault()) {
          _impl_.association_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.passulo.v1.Token.association)
}

// .google.protobuf.Timestamp validUntil = 12;
inline bool Token::has_validuntil() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.validuntil_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Token::_internal_validuntil() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.validuntil_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Token::validuntil() const {
  // @@protoc_insertion_point(field_get:com.passulo.v1.Token.validUntil)
  return _internal_validuntil();
}
inline void Token::unsafe_arena_set_allocated_validuntil(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.validuntil_);
  }
  _impl_.validuntil_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.passulo.v1.Token.validUntil)
}
inline ::google::protobuf::Timestamp* Token::release_validuntil() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.validuntil_;
  _impl_.validuntil_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Token::unsafe_arena_release_validuntil() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:com.passulo.v1.Token.validUntil)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.validuntil_;
  _impl_.validuntil_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Token::_internal_mutable_validuntil() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.validuntil_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaForAllocation());
    _impl_.validuntil_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.validuntil_;
}
inline ::google::protobuf::Timestamp* Token::mutable_validuntil() {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_validuntil();
  // @@protoc_insertion_point(field_mutable:com.passulo.v1.Token.validUntil)
  return _msg;
}
inline void Token::set_allocated_validuntil(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.validuntil_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.validuntil_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:com.passulo.v1.Token.validUntil)
}

// .google.protobuf.Timestamp memberSince = 13;
inline bool Token::has_membersince() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.membersince_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Token::_internal_membersince() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.membersince_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Token::membersince() const {
  // @@protoc_insertion_point(field_get:com.passulo.v1.Token.memberSince)
  return _internal_membersince();
}
inline void Token::unsafe_arena_set_allocated_membersince(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.membersince_);
  }
  _impl_.membersince_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.passulo.v1.Token.memberSince)
}
inline ::google::protobuf::Timestamp* Token::release_membersince() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.membersince_;
  _impl_.membersince_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Token::unsafe_arena_release_membersince() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:com.passulo.v1.Token.memberSince)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.membersince_;
  _impl_.membersince_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Token::_internal_mutable_membersince() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.membersince_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaForAllocation());
    _impl_.membersince_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.membersince_;
}
inline ::google::protobuf::Timestamp* Token::mutable_membersince() {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_membersince();
  // @@protoc_insertion_point(field_mutable:com.passulo.v1.Token.memberSince)
  return _msg;
}
inline void Token::set_allocated_membersince(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.membersince_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.membersince_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:com.passulo.v1.Token.memberSince)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace passulo
}  // namespace com


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::com::passulo::v1::Token_Gender> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::com::passulo::v1::Token_Gender>() {
  return ::com::passulo::v1::Token_Gender_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_com_2fpassulo_2ftoken_2eproto_2epb_2eh
